{"version":3,"sources":["components/Tiles/Tiles.module.css","components/Tiles/TileElement.module.css","components/Tiles/TileElement.tsx","components/Tiles/Tiles.tsx","store/TilesReducer/actions.ts","store/TilesReducer/types.ts","components/Sidebar/Sidebar.tsx","App.tsx","serviceWorker.ts","store/TilesReducer/additional/colors.ts","store/TilesReducer/tiles-reducer.ts","store/TilesReducer/additional/emptyTiles.ts","store/index.ts","index.tsx","components/Sidebar/Sidebar.module.css"],"names":["module","exports","TileElement","tile","clickOnTile","checkTiles","checkGameStatus","onClick","setTimeout","className","styles","tiles__element","style","backgroundColor","frontColor","Tiles","connect","state","tiles","TilesReducer","dispatch","type","handleClickOnTile","tileElements","map","key","id","tiles__container","Sidebar","roundCounter","gameIsStarted","gameIsFinished","startGame","sidebar","sidebar__start","sidebar__counter","disabled","App","Boolean","window","location","hostname","match","color","initState","backColor","isGuessed","slice","previousTile","currentTile","rowCount","columnCount","rootReducer","combineReducers","action","arr","colorCount","shuffleArray","array","i","length","j","Math","floor","random","push","flat","clickedTile","indexOf","every","alert","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7eff1dd9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"tiles__container\":\"Tiles_tiles__container__rVLGv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tiles__element\":\"TileElement_tiles__element__pA0H-\"};","import React, { FC } from 'react';\r\nimport styles from './TileElement.module.css'\r\n\r\nimport { TILE_TYPE } from '../../store/TilesReducer/types';\r\n\r\ninterface TileElementProps {\r\n\ttile: TILE_TYPE;\r\n\tclickOnTile: (tile: TILE_TYPE) => void;\r\n\tcheckTiles: () => void;\r\n\tcheckGameStatus: () => void;\r\n}\r\n\r\nconst TileElement: FC<TileElementProps> = ({\r\n\ttile,\r\n\tclickOnTile,\r\n\tcheckTiles,\r\n\tcheckGameStatus,\r\n}) => {\r\n\tconst handleOnClick = () => {\r\n\t\tclickOnTile(tile);\r\n\t\tsetTimeout(() => {\r\n\t\t\tcheckTiles()\r\n\t\t}, 500);\r\n\t\tsetTimeout(() => {\r\n\t\t\tcheckGameStatus()\r\n\t\t}, 600)\r\n\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div onClick={handleOnClick} className={styles.tiles__element} style={{ backgroundColor: tile.frontColor }} />\r\n\t)\r\n}\r\n\r\nexport { TileElement };","import React, { FC } from 'react';\r\nimport styles from './Tiles.module.css'\r\n\r\n// Chile components:\r\nimport { TileElement } from \"./TileElement\";\r\n\r\n\r\nimport { TILE_TYPE } from \"../../store/TilesReducer/types\";\r\nimport { AppActions, AppState } from '../../store';\r\nimport { connect } from \"react-redux\";\r\nimport { Dispatch } from \"redux\";\r\nimport { handleClickOnTile, checkTiles, checkGameStatus } from \"../../store/TilesReducer/actions\";\r\n\r\ninterface TilesProps {\r\n\ttiles: Array<TILE_TYPE>;\r\n\tclickOnTile: (tile: TILE_TYPE) => void;\r\n\tcheckTiles: () => void;\r\n\tcheckGameStatus: () => void;\r\n}\r\n\r\nconst DumbComponent: FC<TilesProps> = ({\r\n\ttiles,\r\n\tclickOnTile,\r\n\tcheckTiles,\r\n\tcheckGameStatus,\r\n}) => {\r\n\r\n\tconst tileElements = tiles.map(tile => {\r\n\t\treturn (\r\n\t\t\t<TileElement key={tile.id}\r\n\t\t\t\ttile={tile}\r\n\t\t\t\tclickOnTile={clickOnTile}\r\n\t\t\t\tcheckTiles={checkTiles}\r\n\t\t\t\tcheckGameStatus={checkGameStatus}\r\n\t\t\t/>\r\n\t\t)\r\n\t})\r\n\r\n\treturn (\r\n\t\t<div className={styles.tiles__container}>\r\n\t\t\t{tileElements}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n\treturn {\r\n\t\ttiles: state.TilesReducer.tiles,\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AppActions>) => {\r\n\treturn {\r\n\t\tclickOnTile: (tile: TILE_TYPE) => dispatch(handleClickOnTile(tile)),\r\n\t\tcheckTiles: () => dispatch(checkTiles()),\r\n\t\tcheckGameStatus: () => dispatch(checkGameStatus()),\r\n\t}\r\n}\r\nexport const Tiles = connect(mapStateToProps, mapDispatchToProps)(DumbComponent);\r\n","import {\r\n  CHECK_GAME_STATUS,\r\n  CHECK_TILES,\r\n  HANDLE_CLICK_ON_TILE,\r\n  START_GAME,\r\n  TILE_TYPE,\r\n  TILES_ACTION_TYPES,\r\n} from \"./types\";\r\n\r\nexport const handleClickOnTile = (tile: TILE_TYPE): TILES_ACTION_TYPES => {\r\n  return {\r\n    type: HANDLE_CLICK_ON_TILE,\r\n    tile,\r\n  };\r\n};\r\n\r\nexport const checkTiles = (): TILES_ACTION_TYPES => {\r\n  return {\r\n    type: CHECK_TILES,\r\n  };\r\n};\r\n\r\nexport const startGame = (): TILES_ACTION_TYPES => {\r\n  return {\r\n    type: START_GAME,\r\n  };\r\n};\r\n\r\nexport const checkGameStatus = (): TILES_ACTION_TYPES => {\r\n  return {\r\n    type: CHECK_GAME_STATUS,\r\n  };\r\n};\r\n","// Types:\r\nexport interface TILE_TYPE {\r\n  id: number;\r\n\r\n  frontColor: string;\r\n  backColor: string;\r\n\r\n  isGuessed: boolean;\r\n}\r\n\r\n// State type:\r\nexport interface TILES_STATE {\r\n  // Flag for start of a game:\r\n  gameIsStarted: boolean;\r\n  gameIsFinished: boolean;\r\n\r\n  // Round counter:\r\n  roundCounter: number;\r\n\r\n  // Tiles:\r\n  tiles: Array<TILE_TYPE>;\r\n  previousTile: TILE_TYPE | null;\r\n  currentTile: TILE_TYPE | null;\r\n\r\n  // Size of\r\n  rowCount: number;\r\n  columnCount: number;\r\n}\r\n\r\n// Actions types:\r\nexport const HANDLE_CLICK_ON_TILE = \"HANDLE_CLICK_ON_TILE\";\r\nexport const CHECK_TILES = \"CHECK_TILES\";\r\n\r\nexport const START_GAME = \"START_GAME\";\r\nexport const CHECK_GAME_STATUS = \"CHECK_GAME_STATUS\";\r\n\r\ninterface HANDLE_CLICK_ON_TILE_ACTION {\r\n  type: typeof HANDLE_CLICK_ON_TILE;\r\n  tile: TILE_TYPE;\r\n}\r\n\r\ninterface CHECK_TILES_ACTION {\r\n  type: typeof CHECK_TILES;\r\n}\r\n\r\ninterface START_GAME_ACTION {\r\n  type: typeof START_GAME;\r\n}\r\n\r\ninterface CHECK_GAME_STATUS_ACTION {\r\n  type: typeof CHECK_GAME_STATUS;\r\n}\r\n\r\nexport type TILES_ACTION_TYPES =\r\n  | HANDLE_CLICK_ON_TILE_ACTION\r\n  | START_GAME_ACTION\r\n  | CHECK_TILES_ACTION\r\n  | CHECK_GAME_STATUS_ACTION;\r\n","import React, { FC } from 'react';\r\nimport styles from './Sidebar.module.css'\r\n\r\n// Actions for mapDispatchToProps:\r\nimport { AppActions, AppState } from \"../../store\";\r\nimport { startGame } from \"../../store/TilesReducer/actions\";\r\nimport { Dispatch } from \"redux\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\ninterface SidebarProps {\r\n\troundCounter: number;\r\n\tgameIsStarted: boolean;\r\n\tgameIsFinished: boolean;\r\n\r\n\tstartGame: () => void;\r\n}\r\n\r\nconst DumbComponent: FC<SidebarProps> = ({\r\n\troundCounter,\r\n\tgameIsStarted,\r\n\tgameIsFinished,\r\n\tstartGame\r\n}) => {\r\n\r\n\tconst handleClickStartButton = () => {\r\n\t\tstartGame();\r\n\t}\r\n\r\n\tconst element = () => {\r\n\t\tif (!gameIsStarted && !gameIsFinished) {\r\n\t\t\treturn 'Click on button to start!'\r\n\t\t} else if (gameIsStarted && !gameIsFinished) {\r\n\t\t\treturn 'Game is started!'\r\n\t\t} else {\r\n\t\t\treturn 'Game is finished'\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={styles.sidebar}>\r\n\t\t\t<div><p>{element()}</p></div>\r\n\t\t\t<button className={styles.sidebar__start} onClick={handleClickStartButton}>START GAME</button>\r\n\t\t\t<button className={styles.sidebar__counter} disabled>ROUNDS: {roundCounter}</button>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n\treturn {\r\n\t\troundCounter: state.TilesReducer.roundCounter,\r\n\t\tgameIsStarted: state.TilesReducer.gameIsStarted,\r\n\t\tgameIsFinished: state.TilesReducer.gameIsFinished,\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AppActions>) => {\r\n\treturn {\r\n\t\tstartGame: () => dispatch(startGame()),\r\n\t}\r\n}\r\n\r\nexport const Sidebar = connect(mapStateToProps, mapDispatchToProps)(DumbComponent);","import React from 'react';\nimport './App.css';\nimport { Tiles } from './components/Tiles/Tiles';\nimport { Sidebar } from \"./components/Sidebar/Sidebar\";\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<h1>Memo game</h1>\n\t\t\t<Tiles />\n\t\t\t<Sidebar />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","export const color = [\r\n  \"#007F00\", //1\r\n  \"#84007F\", //4\r\n  \"#0000AB\", //32\r\n  \"#00FFFF\", //31\r\n  \"#FF9100\", //9\r\n  \"#FFFFFF\", //18\r\n  \"#534100\", //14\r\n  \"#FF0000\", //27\r\n  \"#FFFF00\", //5\r\n  \"#000000\", //29\r\n  \"#FF00FF\", //21\r\n  \"#B7FFB4\", //3\r\n  \"#9E9DFF\", //17\r\n  \"#939600\", //15\r\n  \"#9B0000\", //23\r\n  \"#000054\", //12\r\n  \"#00FF00\", //8\r\n  \"#FF9A9A\", //30\r\n  \"#00FF9B\", //6\r\n  \"#68FF69\", //2\r\n  \"#6AFFFF\", //7\r\n  \"#514EFF\", //10\r\n  \"#FFFF67\", //11\r\n  \"#00C04E\", //13\r\n  \"#FF6EFF\", //16\r\n  \"#006F93\", //19\r\n  \"#0000FF\", //20\r\n  \"#0093FF\", //22\r\n  \"#FF0094\", //24\r\n  \"#80FF00\", //25\r\n  \"#FF4A4D\", //26\r\n  \"#9300FF\", //28\r\n];\r\n","import {\r\n  CHECK_GAME_STATUS,\r\n  CHECK_TILES,\r\n  HANDLE_CLICK_ON_TILE,\r\n  START_GAME,\r\n  TILE_TYPE,\r\n  TILES_ACTION_TYPES,\r\n  TILES_STATE,\r\n} from \"./types\";\r\n// Tiles colors:\r\nimport { color } from \"./additional/colors\";\r\nimport { emptyTiles } from \"./additional/emptyTiles\";\r\n\r\nconst initState: TILES_STATE = {\r\n  gameIsStarted: false,\r\n  gameIsFinished: false,\r\n\r\n  roundCounter: 0,\r\n\r\n  tiles: emptyTiles.slice(),\r\n\r\n  previousTile: null,\r\n  currentTile: null,\r\n\r\n  rowCount: 4,\r\n  columnCount: 4,\r\n};\r\n\r\nexport const TilesReducer = (\r\n  state = initState,\r\n  action: TILES_ACTION_TYPES\r\n): TILES_STATE => {\r\n  switch (action.type) {\r\n    case START_GAME: {\r\n      let arr = [];\r\n      // Getting count of colors for tiles:\r\n      let colorCount = (state.columnCount * state.rowCount) / 2;\r\n\r\n      /* Function to randomize array in-place using Durstenfeld shuffle algorithm */\r\n      const shuffleArray = (array: Array<TILE_TYPE>) => {\r\n        for (let i = array.length - 1; i > 0; i--) {\r\n          let j = Math.floor(Math.random() * (i + 1));\r\n          [array[i], array[j]] = [array[j], array[i]];\r\n        }\r\n      };\r\n\r\n      // Filling an array:\r\n      for (let i = 0, id = 0; i < colorCount; i++, id += 2) {\r\n        // Pushing pairs. IDs are equal to indexes:\r\n        arr.push([\r\n          {\r\n            id: id,\r\n            frontColor: \"lightgrey\",\r\n            backColor: color[i],\r\n            isGuessed: false,\r\n          },\r\n          {\r\n            id: id + 1,\r\n            frontColor: \"lightgrey\",\r\n            backColor: color[i],\r\n            isGuessed: false,\r\n          },\r\n        ]);\r\n      }\r\n      // Flatting array to get unpaired array:\r\n      let array = arr.flat();\r\n\r\n      // Shuffling array:\r\n      shuffleArray(array);\r\n\r\n      return {\r\n        ...state,\r\n        gameIsStarted: true,\r\n        roundCounter: 0,\r\n        tiles: array,\r\n        previousTile: null,\r\n        currentTile: null,\r\n      };\r\n    }\r\n\r\n    case HANDLE_CLICK_ON_TILE: {\r\n      if (!state.gameIsStarted) {\r\n        return state;\r\n      }\r\n\r\n      // Getting clicked tile index:\r\n      let arr = state.tiles.slice();\r\n      let clickedTile = arr[arr.indexOf(action.tile)];\r\n\r\n      // Checking if tile is already guessed\r\n      // or not equal to the previous one\r\n      if (clickedTile.isGuessed || clickedTile.id === state.previousTile?.id)\r\n        return state;\r\n\r\n      // Setting\r\n      if (state.previousTile === null) {\r\n        clickedTile.frontColor = clickedTile.backColor;\r\n        return {\r\n          ...state,\r\n          previousTile: clickedTile,\r\n          tiles: arr,\r\n        };\r\n      } else if (state.currentTile === null) {\r\n        clickedTile.frontColor = clickedTile.backColor;\r\n        return {\r\n          ...state,\r\n          currentTile: clickedTile,\r\n          tiles: arr,\r\n        };\r\n      } else {\r\n        return state;\r\n      }\r\n    }\r\n\r\n    case CHECK_TILES: {\r\n      if (state.currentTile === null || state.previousTile === null)\r\n        return state;\r\n\r\n      let arr = state.tiles.slice();\r\n      let currentTile = arr[arr.indexOf(state.currentTile)];\r\n      let previousTile = arr[arr.indexOf(state.previousTile)];\r\n\r\n      let gameIsFinished = false;\r\n      if (\r\n        currentTile.id !== previousTile.id &&\r\n        currentTile.backColor === previousTile.backColor\r\n      ) {\r\n        [currentTile.frontColor, previousTile.frontColor] = [\r\n          currentTile.backColor,\r\n          previousTile.backColor,\r\n        ];\r\n        [currentTile.isGuessed, previousTile.isGuessed] = [true, true];\r\n        gameIsFinished = arr.every((tile) => tile.isGuessed);\r\n      } else {\r\n        previousTile.frontColor = \"lightgrey\";\r\n        currentTile.frontColor = \"lightgrey\";\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        roundCounter: state.roundCounter + 1,\r\n        tiles: arr.slice(),\r\n        currentTile: null,\r\n        previousTile: null,\r\n        gameIsFinished: gameIsFinished,\r\n      };\r\n    }\r\n\r\n    case CHECK_GAME_STATUS: {\r\n      if (state.gameIsFinished) {\r\n        debugger;\r\n        alert(\"Congratulations! You won at \" + state.roundCounter + \" round!\");\r\n        return {\r\n          ...state,\r\n          gameIsStarted: false,\r\n          gameIsFinished: false,\r\n        };\r\n      }\r\n      return state;\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export const emptyTiles = [\r\n  { id: 1, frontColor: \"lightgrey\", backColor: \"\", isGuessed: false },\r\n  { id: 2, frontColor: \"lightgrey\", backColor: \"\", isGuessed: false },\r\n  { id: 3, frontColor: \"lightgrey\", backColor: \"\", isGuessed: false },\r\n  { id: 4, frontColor: \"lightgrey\", backColor: \"\", isGuessed: false },\r\n  { id: 5, frontColor: \"lightgrey\", backColor: \"\", isGuessed: false },\r\n  { id: 6, frontColor: \"lightgrey\", backColor: \"\", isGuessed: false },\r\n  { id: 7, frontColor: \"lightgrey\", backColor: \"\", isGuessed: false },\r\n  { id: 8, frontColor: \"lightgrey\", backColor: \"\", isGuessed: false },\r\n  { id: 9, frontColor: \"lightgrey\", backColor: \"\", isGuessed: false },\r\n  { id: 10, frontColor: \"lightgrey\", backColor: \"\", isGuessed: false },\r\n  { id: 11, frontColor: \"lightgrey\", backColor: \"\", isGuessed: false },\r\n  { id: 12, frontColor: \"lightgrey\", backColor: \"\", isGuessed: false },\r\n  { id: 13, frontColor: \"lightgrey\", backColor: \"\", isGuessed: false },\r\n  { id: 14, frontColor: \"lightgrey\", backColor: \"\", isGuessed: false },\r\n  { id: 15, frontColor: \"lightgrey\", backColor: \"\", isGuessed: false },\r\n  { id: 16, frontColor: \"lightgrey\", backColor: \"\", isGuessed: false },\r\n];\r\n","import { combineReducers } from \"redux\";\r\nimport { TilesReducer } from \"./TilesReducer/tiles-reducer\";\r\nimport { TILES_ACTION_TYPES } from \"./TilesReducer/types\";\r\n\r\nexport const rootReducer = combineReducers({\r\n  TilesReducer,\r\n});\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\nexport type AppActions = TILES_ACTION_TYPES;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux'\nimport { createStore } from \"redux\";\nimport { rootReducer } from \"./store\";\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidebar\":\"Sidebar_sidebar__1qB3m\",\"sidebar__start\":\"Sidebar_sidebar__start__9aYOz\",\"sidebar__counter\":\"Sidebar_sidebar__counter__17dYY\"};"],"sourceRoot":""}